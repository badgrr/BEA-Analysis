library(formatR)
install.packages("formatR")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(formatR)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
getwd()
SPY = read.csv(file="SPY.csv", header=T, sep=",")
summary(SPY)
summary(SPY)
SPY = SPY[, !"Dates"]
summary(SPY)
SPY = SPY[ , !("date")]
SPY = SPY[ , !(names(SPY) %in% drop)]
drop = c("date")
SPY = SPY[ , !(names(SPY) %in% drop)]
summary(SPY)
SPY
pairs(SPY)
pairs(SPY)
pairs(SPY)
boxplot(volume ~ close, data=SPY, main = "Acceleration v mpg01")
boxplot(open ~ close, data=SPY, main = "Open v Close")
pairs(SPY)
boxplot(volume ~ close, data=SPY, main = "Volume v Close")
boxplot(open ~ close, data=SPY, main = "Open v Close")
boxplot(high ~ close, data=SPY, main = "High v Close")
boxplot(low ~ close, data=SPY, main = "Low v Close")
boxplot(adjclose ~ close, data=SPY, main = "AdjClose v Close")
boxplot(T10Y2Y ~ close, data=SPY, main = "T10Y2Y v Close")
# 65/35 test train split
sample <- sample(nrow(SPY), nrow(SPY)*.65, replace=F)
SPY.train <- SPY[sample,]
SPY.test <- SPY[-sample,]
set.seed(1997)
# 65/35 test train split
sample <- sample(nrow(SPY), nrow(SPY)*.65, replace=F)
SPY.train <- SPY[sample,]
SPY.test <- SPY[-sample,]
library(MASS)
SPY.lda <- lda(close ~ volume + open + high + low + adjclose + T10Y2Y, data=SPY.train)
predict(SPY.lda, SPY.test)
library(MASS)
SPY.lda <- lda(close ~ volume + open + high + low + adjclose + T10Y2Y, data=SPY.train)
mean(predict(SPY.lda, SPY.test)$class != SPY.test$close)
library(MASS)
SPY.lda <- lda(close ~ T10Y2Y, data=SPY.train)
mean(predict(SPY.lda, SPY.test)$class != SPY.test$close)
SPY.lm <- lm(close ~ ., data=SPY.train)
SPY.lm.preds <- predict(SPY.lm, SPY.test)
mean((SPY.lm.preds - SPY.test$close)^2) #MSE
SPY.lm <- lm(close ~ ., data=SPY.train)
SPY.lm.preds <- predict(SPY.lm, SPY.test)
mean((SPY.lm.preds - SPY.test$close)^2) #MSE
SPY.test.AsMatrix <- model.matrix(close ~ ., data=SPY.test)
SPY.train.AsMatrix <- model.matrix(close ~ ., data=SPY.train)
lambdaVal <- 10^seq(4,-2,length=100)
require(glmnet)
SPY.ridgeReg <- glmnet(SPY.train.AsMatrix, SPY.train$close, alpha=0, lambda=lambdaVal, thresh=1e-10)
install.packages("glmnet")
SPY.test.AsMatrix <- model.matrix(close ~ ., data=SPY.test)
SPY.train.AsMatrix <- model.matrix(close ~ ., data=SPY.train)
lambdaVal <- 10^seq(4,-2,length=100)
require(glmnet)
SPY.ridgeReg <- glmnet(SPY.train.AsMatrix, SPY.train$close, alpha=0, lambda=lambdaVal, thresh=1e-10)
SPY.crossRidge <- cv.glmnet(SPY.train.AsMatrix, SPY.train$close, alpha=0, lambda=lambdaVal, thresh=1e-10)
optimalLambda <- SPY.crossRidge$lambda.min
ridgePreds <- predict(SPY.ridgeReg, s=optimalLambda, newx=SPY.test.AsMatrix)
ridgeMSE <- mean((ridgePreds - SPY.test$close)^2)
SPY.test.AsMatrix <- model.matrix(close ~ ., data=SPY.test)
SPY.train.AsMatrix <- model.matrix(close ~ ., data=SPY.train)
lambdaVal <- 10^seq(4,-2,length=100)
require(glmnet)
SPY.ridgeReg <- glmnet(SPY.train.AsMatrix, SPY.train$close, alpha=0, lambda=lambdaVal, thresh=1e-10)
SPY.crossRidge <- cv.glmnet(SPY.train.AsMatrix, SPY.train$close, alpha=0, lambda=lambdaVal, thresh=1e-10)
optimalLambda <- SPY.crossRidge$lambda.min
ridgePreds <- predict(SPY.ridgeReg, s=optimalLambda, newx=SPY.test.AsMatrix)
mean((ridgePreds - SPY.test$close)^2) #Get Ridge MSE
require(pls)
SPY.pcr <- pcr(close ~ ., data=SPY.train, scale=TRUE, validation="CV")
packages.install("pls")
install.packages("pcr")
